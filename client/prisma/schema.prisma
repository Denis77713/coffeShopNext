generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id             Int          @id @default(autoincrement())
  // поле уникальное
  email          String       @unique
  password       String
  isActivated    Boolean      @default(false)
  activationLink String
  name           String
  lastName       String
  role           String       @default("user")
  token          Token?
  ProductPay     ProductPay[]
}

model Token {
  token        User   @relation(fields: [userId], references: [id])
  userId       Int    @unique
  refreshToken String
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  image    String
  // Связь одна Category ко многим Product
  page     String
  products Product[]
  filters  Filter[]
}

model Product {
  id         Int      @id @default(autoincrement())
  name       String
  imageUrl   String
  // Связь с Category
  category   Category @relation(fields: [categoryId], references: [id])
  // Связь с Category
  price      String
  best       String
  weight     String
  none       String
  drip       String
  number     Int      @default(5)
  categoryId Int
}

model ProductPay {
  id        Int    @id @default(autoincrement())
  userId    Int
  productId Int[]
  status    String @default("Успешный заказ")
  user      User   @relation(fields: [userId], references: [id])
}

model Filter {
  id       Int      @id @default(autoincrement())
  name     String
  value    String
  text     String
  // Связь с Category
  filter   Category @relation(fields: [filterId], references: [id])
  filterId Int
}

model City {
  id        Int        @id @default(autoincrement())
  name      String
  locations Location[]
}

model Location {
  id          Int     @id @default(autoincrement())
  adress      String
  locatin     String
  time        String
  menu        String
  newIsOpen   Boolean
  newLocation String
  isWork      Boolean
  city        City    @relation(fields: [cityId], references: [id])
  cityId      Int
}

model Carousel {
  id    Int    @id @default(autoincrement())
  image String
}

model WhyUsList {
  id    Int    @id @default(autoincrement())
  text  String
  image String
  title String
}

model Contacts {
  id    Int    @id @default(autoincrement())
  email String
  text  String
}
